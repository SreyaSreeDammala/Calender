#FINDS THE ODD DAYS FOR LAST 2 DIGITS OF AN YEAR
def odd_count(year):
    if year == 0:
        return 0
    year -= 1
    odd = year % 7
    leap_years = year // 4
    odd_days = (odd + leap_years) % 7
    return odd_days

#FINDS THE ODD DAYS FOR FIRST 2 DIGITS OF AN YEAR
def odd_year(yr):
    if yr % 4 == 0:
        return 0
    elif yr % 4 == 1:
        return 5
    elif yr % 4 == 2:
        return 3
    elif yr % 4 == 3:
        return 1

def under_thousand(year):
    year = year // 100
    return odd_year(year)

#FINDS THE NUMBER OF ODD DAYS FOR A PARTICULAR YEAR(SUM OF FIRST 2 DIGITS AND LAST 2 DIGITS
def year_code(num):
    if num >= 1000:
        first_part = num // 100
        second_part = num % 100
        century_code = odd_year(first_part)
        num_code = odd_count(second_part)
        yr_code = (century_code + num_code) % 7
        return yr_code
    else:
        second_part = num % 100
        century_code = under_thousand(num)
        num_code = odd_count(second_part)
        yr_code = (century_code + num_code) % 7
        return yr_code

#FINDS THE NUMBER OF ODD DAYS FOR A PARTICULAR DATE
def date_code(date):
    return date % 7

#FINDS THE NUMBER OF ODD DAYS FOR A PARTICULAR MONTH
def month_code(mnt_num):
    mnt_code = {1:0, 2:3, 3:3, 4:6, 5:1, 6:4, 7:6, 8:2, 9:5, 10:0, 11:3, 12:5}
    return mnt_code[mnt_num]

#FINDS THE WEEK DAY TO THE RESPECTIVE PROVIDED ODD DAY
def week_day(num):
    week_days = {0:'Sunday', 1:'Monday', 2:'Tuesday', 3:'Wednesday', 4:'Thursday',
                 5:'Friday', 6:'Saturday'}
    return week_days[num]

#CHECKS FOR THE WEEK DAY FOR A GIVEN PARTICULAR DATE
def check_week_day(date, month, year):
    day = (date_code(date) + month_code(month) + year_code(year)) % 7
    if month > 2 and (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)):
        day = (day + 1) % 7
    return week_day(day)

#Validate the input date
def is_valid_date(day, month, year):
    if year < 1 or month < 1 or month > 12 or day < 1:
        return False
    
    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    
    # Check for leap year
    if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):
        days_in_month[1] = 29
    
    return day <= days_in_month[month - 1]

#Main function to run the weekday calculator
def main():
    print("Weekday Calculator")
    while True:
        try:
            date = int(input("Enter a date (1-31): "))
            month = int(input("Enter a month (1-12): "))
            year = int(input("Enter a year: "))
            
            if is_valid_date(date, month, year):
                result = check_week_day(date, month, year)
                print(f"The day for {date}/{month}/{year} is: {result}")
            else:
                print("Invalid date. Please enter a valid date.")
        except ValueError:
            print("Invalid input. Please enter integers for date, month, and year.")
        
        if input("Calculate another date? (y/n): ").lower() != 'y':
            print("Thank you for using the Weekday Calculator. Goodbye!")
            break

if __name__ == "__main__":
    main()
